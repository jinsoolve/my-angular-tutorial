import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';

export interface SearchItem {
  id: string;
  name: string;
  route: string;
  visitCount?: number;
  recentVisit?: number;
}

@Injectable({ providedIn: 'root' })
export class SearchDBService {
  private _items: SearchItem[] = [];
  private _items$ = new BehaviorSubject<SearchItem[]>([]);
  public readonly items$ = this._items$.asObservable();

  // üî• Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ: history$ÏôÄ popular$
  public readonly history$: Observable<SearchItem[]> = this.items$.pipe(
    map(items =>
      [...items]
        .filter(item => item.recentVisit && item.recentVisit > 0)
        .sort((a, b) => (b.recentVisit ?? 0) - (a.recentVisit ?? 0))
        .slice(0, 15)
    )
  );

  public readonly popular$: Observable<SearchItem[]> = this.items$.pipe(
    map(items =>
      [...items]
        .filter(item => item.visitCount && item.visitCount > 0)
        .sort((a, b) => (b.visitCount ?? 0) - (a.visitCount ?? 0))
        .slice(0, 10)
    )
  );

  constructor() {
    this.loadItems();
  }

  private async loadItems() {
    const staticData = await fetch('/assets/json/search-items.json')
      .then(res => res.json()) as SearchItem[];
    const visitData = this.loadVisitData();

    const merged = staticData.map(item => ({
      ...item,
      visitCount: visitData[item.id]?.visitCount ?? 0,
      recentVisit: visitData[item.id]?.recentVisit ?? 0
    }));

    this._items = merged;
    this._items$.next(this._items);
  }

  updateVisit(id: string): void {
    const item = this._items.find(i => i.id === id);
    if (!item) return;

    item.visitCount = (item.visitCount ?? 0) + 1;
    item.recentVisit = Date.now();

    this._items$.next(this._items);
    this.saveVisitData();
  }

  private loadVisitData(): Record<string, { visitCount: number; recentVisit: number }> {
    try {
      return JSON.parse(localStorage.getItem('searchVisitData') ?? '{}');
    } catch {
      return {};
    }
  }

  private saveVisitData() {
    const visitData: Record<string, { visitCount: number; recentVisit: number }> = {};
    for (const item of this._items) {
      visitData[item.id] = {
        visitCount: item.visitCount ?? 0,
        recentVisit: item.recentVisit ?? 0
      };
    }
    localStorage.setItem('searchVisitData', JSON.stringify(visitData));
  }
}