private waitForScrollContainer(timeout = 5000): Promise<Element> {
  const selector = '.cx-content.flexible-padding.hide-scrollbar';

  return new Promise((resolve, reject) => {
    const existing = document.querySelector(selector);
    if (existing) return resolve(existing);

    const observer = new MutationObserver((_mutations, obs) => {
      const found = document.querySelector(selector);
      if (found) {
        obs.disconnect();
        resolve(found);
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    setTimeout(() => {
      observer.disconnect();
      reject(new Error(`[waitForScrollContainer] Timeout after ${timeout}ms`));
    }, timeout);
  });
}





this.waitForElement(selector)
  .then((el) => {
    el.scrollIntoView({ behavior: 'smooth', block: 'start' });

    this.waitForScrollContainer()
      .then((scrollEl) => {
        this.waitForScrollEnd(() => {
          this.highlightBlink(el);
        }, scrollEl);
      })
      .catch(() => {
        console.warn('[doFocus] Scroll container not found');
        this.highlightBlink(el); // fallback
      });
  });